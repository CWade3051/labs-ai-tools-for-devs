/*
Docker Desktop secrets API

This Docker Desktop API manages user secrets to be injected in containers.

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretsapi

import (
	"encoding/json"
)

// StoredSecret struct for StoredSecret
type StoredSecret struct {
	// the name of the secret
	Name string `json:"name"`
	// the list of policy names associated with the secret
	Policies []string `json:"policies"`
}

// NewStoredSecret instantiates a new StoredSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoredSecret(name string, policies []string) *StoredSecret {
	this := StoredSecret{}
	this.Name = name
	this.Policies = policies
	return &this
}

// NewStoredSecretWithDefaults instantiates a new StoredSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoredSecretWithDefaults() *StoredSecret {
	this := StoredSecret{}
	return &this
}

// GetName returns the Name field value
func (o *StoredSecret) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StoredSecret) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StoredSecret) SetName(v string) {
	o.Name = v
}

// GetPolicies returns the Policies field value
func (o *StoredSecret) GetPolicies() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
func (o *StoredSecret) GetPoliciesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *StoredSecret) SetPolicies(v []string) {
	o.Policies = v
}

func (o StoredSecret) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["policies"] = o.Policies
	}
	return json.Marshal(toSerialize)
}

type NullableStoredSecret struct {
	value *StoredSecret
	isSet bool
}

func (v NullableStoredSecret) Get() *StoredSecret {
	return v.value
}

func (v *NullableStoredSecret) Set(val *StoredSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableStoredSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableStoredSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoredSecret(val *StoredSecret) *NullableStoredSecret {
	return &NullableStoredSecret{value: val, isSet: true}
}

func (v NullableStoredSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoredSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
